#!/system/bin/sh
#set -e
#set -x

SSID=mnet      # set this to your desired string (avoid spaces and non-ascii characters)
DATA=$(ip route show | head -n 1| awk -F " " '{print $3}')  # finds the current internet iface
SUBNET=10.0.0
IP=${SUBNET}.1 # 10.0.0.1 !! this script was predicated on a sane gateway and DHCP range. Fuck the 192.168.random.number BS
PASSPHRASE=foobarfoo
AP=mnet0
HPD=/data/vendor/wifi/hostapd
DNS=/data/misc/dhcp

USAGE()
{
    	echo 'options'
    	printf '\t%s\n' "$(basename "$0"): up | down | arp | log"
        exit
}

DOWN()
{
    # hope there are no other instances of same daemons
    pkill hostapd
    pkill dnsmasq
    pkill mportal
    # remove iptables rules
    iptables -D INPUT -i $AP -p udp -m udp --dport 53 -j ACCEPT
    iptables -t nat -D POSTROUTING -s ${SUBNET}.0/24 ! -o $AP -j MASQUERADE
    iptables -D FORWARD -i $AP -s ${IP}/24 -j ACCEPT
    iptables -D FORWARD -i $DATA -d ${SUBNET}.0/24 -j ACCEPT
    # delete AP interface
    ip link show | grep "${AP}:" && iw $AP del
} > /dev/null 2>&1


CHECKS() {
    for binary in iw ip iptables hostapd dnsmasq; do

        which $binary >/dev/null && continue
        exit
    done

    # this check is to determine what nic is currently connected to internet
    if iw dev wlan0 link | grep -q '^Not connected'
    then
        echo no wifi connection, using $DATA iface ...
	#       exit
    fi
}

LOG()
{
    if [ "$HW" = "g"   ]; then
        BND=2.4GHz
    else
        BND=5GHz
    fi

#TO-DO This messy, I know...
logcat -f -v color |grep -e hostapd -e dnsmasq
echo -e '\e[01;30m====================================================================================\e[0m'
echo -e '\e[01;36mmnet softAP\e[0m''                          '\|'\e[0;32mBATTERY\e[0m':'\e[1;33m'$(acpi |cut -d : -f 2)'\e[0m' \| FREQ:'\e[01;36m'$FRQ'\e[0m' \| CH:'\e[01;36m'$CH'\e[0m' \| BAND:'\e[01;36m'$BND'\e[0m'
echo -e '\e[01;30m====================================================================================\e[0m'
echo -e '\e[01;32mHOST NET\e[0m''               '\| '\e[01;32m'$HSSID'\e[0m' \| $BSS \| $SIGNL \| '\e[1;35m'"$(curl -s icanhazip.com)"'\e[0m'
echo -e '\e[01;36msoftAP \e[0m''                                   '\| '\e[01;36m'$SSID'\e[0m' \| "$(ifconfig "$AP" |head -n 1 |cut -d H -f 2|cut -c 7-24|tr -d ' ')" \| '\e[1;35m'"$(ifconfig "$DATA"|head -n 2|tail -n 1|cut -d : -f 2 |cut -d B -f 1|cut -d\( -f 2 |tr -d ' ')"'\e[0m'
echo -e '\e[01;30m====================================================================================\e[0m'
}

INFO()
{
    # Here we set vars for hostapd, TODO *SLOPPY CLEAN THIS UP* USE SYSFS/NATIVE UTILS 
    iw wlan0 scan | head -n 11 >/sdcard/wscn.tmp
    FRQ=$(cat /sdcard/wscn.tmp | grep freq | cut -d : -f 2 | tr -d ' ')
    HSSID=$(cat /sdcard/wscn.tmp | grep SSID | cut -d : -f 2 | tr -d ' ')
    CH=$(cat /sdcard/wscn.tmp | grep channel | cut -d l -f 2 | tr -d ' ')
    BSS=$(cat /sdcard/wscn.tmp|grep BSS|cut -d S -f 3 |cut -d - -f 1|tr -d ' '|cut -c 1-17)
    SIGNL=$(cat /sdcard/wscn.tmp|grep signal| cut -d : -f 2|tr -d ' ')
}

GETBAND()
{
    if  [ "$CH" -lt "14" ]; then
        HW=g
    else
        HW=a
    fi

}

CREATE_AP()
{
    if ! iw dev wlan0 interface add $AP type __ap
    then
        echo "Couldn't create AP."  # :(
        exit
    fi
}

ADD_IP_ROUTE()
{

    # activate the interface and add IP
    ip link set up dev $AP
    ip addr add ${IP}/24 broadcast ${SUBNET}.255 dev $AP

    # routing table 97 needs to be put necessarily on Android
    # because in main table, route for $DATA takes priority (ip route show)
    # and all traffic goes there ignoring $AP
    ip route add ${SUBNET}.0/24 dev $AP table 97
}


HOSTAPD_CONFIG()
{
    # hostapd configuration DEFAULTS TO 2.4GHz
    if [ -e $HPD/hostapd_mnet0-a.conf ]; then
        rm $HPD/hostapd_mnet0-a.conf
    fi
	cat <<-EOF >$HPD/hostapd_mnet0-a.conf
	ssid=$SSID
	interface=$AP
	driver=nl80211
	ctrl_interface=$HPD/ctrl
	acs_exclude_dfs=0
	vht_capab=[SHORT-GI-80]
	vht_oper_chwidth=1
	channel=0
	op_class=127
	ieee80211n=1
	ieee80211ac=1
	hw_mode=a
	ignore_broadcast_ssid=0
	wowlan_triggers=any
	wpa=2
	rsn_pairwise=CCMP
	wpa_passphrase=$PASSPHRASE
	EOF

    # hostapd configuration
    if [ -e $HPD/hostapd_mnet0.conf ]; then
        rm $HPD/hostapd_mnet0.conf
    fi
	cat <<-EOF >$HPD/hostapd_mnet0.conf
	ssid=$SSID
	interface=$AP
	driver=nl80211
	ctrl_interface=$HPD/ctrl
	acs_exclude_dfs=0
	channel=0
	op_class=83
	ieee80211n=1
	ieee80211ac=1
	hw_mode=g
	ignore_broadcast_ssid=0
	wowlan_triggers=any
	wpa=2
	rsn_pairwise=CCMP
	wpa_passphrase=$PASSPHRASE
	EOF
}


INTERNET_SHARE()
{

#    # allow IP forwarding

    for a in $(find /proc/sys/net/ipv6/conf/* -maxdepth 1 -name forwarding) 
    do
        echo 1 >$a
    done

    echo 1 >/proc/sys/net/ipv4/ip_forward
    iptables -t nat -I POSTROUTING -s ${SUBNET}.0/24 ! -o $AP -j MASQUERADE
    iptables -I FORWARD -i $AP -s ${IP}/24 -j ACCEPT
    iptables -I FORWARD -i $DATA -d ${SUBNET}.0/24 -j ACCEPT
}


DHCP_SERVER() #No internet culprit? This or one of androids paranoid networking permissions breaks connection
{
    # configuration
    if [ -e $DNS/dnsmasq.conf ]; then
       rm $DNS/dnsmasq.conf
    fi

    cat <<-EOF >$DNS/dnsmasq.conf
	user=dns_tether
	group=net_admin
	bind-interfaces
	listen-address=10.0.0.1
	interface=mnet0
	dhcp-range=10.0.0.2,10.0.0.20,1hr
	dhcp-option-force=option:router,10.0.0.1
	log-dhcp
        no-hosts
	no-resolv

    #open listening port
    iptables -I INPUT -i $AP -p udp -m udp --dport 53 -j ACCEPT
    # start dhcp server and set permissions
    chown wifi:wifi -R $DNS
    dnsmasq -C $DNS/dnsmasq.conf -x $DNS/dnsmasq.pid -l $DNS/dnsmasq.leases & #RUN IN BACKGROUND!
}


if [ "$1" = down ]; then
    DOWN || true
    exit
fi

if [ "$1" = arp ]; then
    cat /proc/net/arp|grep -e Device -e $AP
    exit
fi


[ $1 = up ] || USAGE
# basic check
CHECKS
# stop running instances
DOWN || true
# scan info from current connection
INFO
# set band with target
GETBAND
# create virtual wireless interface
CREATE_AP
# configre newly created interface
ADD_IP_ROUTE
# configure acces point daemon
HOSTAPD_CONFIG
# start hostapd use replace with hostapd_mnet0-a.conf for 5GHz
chown wifi:wifi -R $HPD
hostapd -g$HPD/global $HPD/hostapd_mnet0.conf &
# share internet
INTERNET_SHARE
# run a dhcp server to assign IP's dynamically
# permission probs, assign a static IP to connected device in subnet range (2 to 20)
DHCP_SERVER
# special stuffs #haveged #powersave off
# basic summary
LOG
#captive portal
#MPORTAL
